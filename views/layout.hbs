<!DOCTYPE html>
<html>

<head>
	<title>{{title}}</title>
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css">
	<script src="https://code.jquery.com/jquery-3.2.1.js" integrity="sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE=" crossorigin="anonymous">
	</script>
	<link href="/stylesheets/style.css" type="text/css" rel="stylesheet">
	<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
	<script src="https://wzrd.in/standalone/buffer"></script>
    <script src="https://unpkg.com/ipfs-api@9.0.0/dist/index.js"
			integrity="sha384-5bXRcW9kyxxnSMbOoHzraqa7Z0PQWIao+cgeg327zit1hz5LZCEbIMx/LWKPReuB"
			crossorigin="anonymous"></script>
	<script src="/javascripts/web3.js"></script>
</head>

<body>

	<div class="row">

		<div class="col-xs-2">
			<nav>
				<div class="row">

					<div class="col-xs-12">
						<br>
						<button type="button" class="btn btn-success">
							<a href="/">Products</a>
						</button>
						
					</div>

					<div class="col-xs-12">
						<br>
						<button type="button" class="btn btn-success">
							<a href="/seller/addProduct">Add Product</a>
						</button>
						
					</div>

					<div class="col-xs-12">
						<br>
						<br>
						<br>
						<button type="button" class="btn btn-info">
							<a href="/buyer/register">Register as Buyer</a>
						</button>
						
					</div>

					<div class="col-xs-12">
						<br>
						<button type="button" class="btn btn-info">
							<a href="/seller/register">Register as Seller</a>
						</button>
						
					</div>

					

					<div class="col-xs-12">
						<br>
						<br>
						<br>
						<button type="button" class="btn btn-primary">
							<a href="/seller/checkBalance">Check balance</a>
						</button>
						
					</div>

					<div class="col-xs-12">
						<br>
						<button type="button" class="btn btn-primary">
							<a href="/seller/withdraw">Withdraw</a>
						</button>
						
					</div>
				</div>
			</nav>
		</div>

		<div class="col-xs-8">
			<div class="">

				<div class="row">

					<div class="error-msg msg hide-me" class="col-xs-12"></div>
					<div class="success-msg msg hide-me" class="col-xs-12"></div>

				</div>

				{{{body}}}
			</div>
		</div>

	</div>

</body>

<script>
	let contract = {};
	const creator = '0x627306090abab3a6e1400e9345bc60c78a8bef57';
	const contractAddress = '0x8cdaf0cd259887258bc13a92c0a6da92698644c0';

	const shouldGetProducts = '{{shouldGetProducts}}';

	//const creator = '{{contractCreator}}';
	//const contractAddress = '{{contractAddress}}';

	const contractAbi = [
	{
		"constant": true,
		"inputs": [],
		"name": "getBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "registerAsSeller",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "withdraw",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "productName",
				"type": "string"
			}
		],
		"name": "buyProduct",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getNumberOfProducts",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "registerAsBuyer",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "productName",
				"type": "string"
			}
		],
		"name": "getProductPrice",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getProduct",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "price",
				"type": "uint256"
			},
			{
				"name": "productName",
				"type": "string"
			},
			{
				"name": "doc",
				"type": "string"
			},
			{
				"name": "ipfsPath",
				"type": "string"
			}
		],
		"name": "addProduct",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getFee",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"name": "_registerTax",
				"type": "uint256"
			},
			{
				"name": "_fee",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"payable": true,
		"stateMutability": "payable",
		"type": "fallback"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "addr",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "_registerTax",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "currentTime",
				"type": "uint256"
			}
		],
		"name": "RegisterEvent",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "addr",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "currentTime",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "price",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "productName",
				"type": "string"
			}
		],
		"name": "BuyProduct",
		"type": "event"
	}
]

	
	//let web3 = {};
	window.addEventListener('load', function () {

		

			//var web3 = {};
			//if (typeof window.web3 !== "undefined" && typeof window.web3.currentProvider !== "undefined") {
			//	web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/ri45PYMaMiRFCfZh2H5a"));
			//} else {
			//	web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/ri45PYMaMiRFCfZh2H5a"));
			//}
		if (typeof web3 !== 'undefined') {
			//console.log(web3.currentProvider);
			//App.web3Provider = web3.currentProvider;
			web3 = new Web3(web3.currentProvider);
		} else if (typeof window.web3 !== "undefined" && typeof window.web3.currentProvider !== "undefined") {
			//web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
			//App.web3Provider = web3.currentProvider;
			web3 = new Web3(web3.currentProvider);
		} else {
			web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
		}

		//console.log(8880)
		//console.log(BigNumber);

		//web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
		contract = web3.eth.contract(contractAbi).at(contractAddress);

		// ******************   Buyer *****************
		$('#btn-buyer-register').click(buyerRegister);
		function buyerRegister(){
			let userAddress = $('#userAddress').val();

			if(!isAddressValid(userAddress)){
				return;
			}

			let options = {
				from: userAddress, 
				value: '1000000000000000000', 
				gas: 1000000
			};

			contract.registerAsBuyer(options, function(err,result){
				if(err){
					showErrorMsg(err);
					return;
				}
				
				// tx hash
				let msg = `Successfully register like Buyer! Transaction hash: ${result}`;
				showSuccessMsg(msg);
			});
		};

		// ******************   Seller  *****************
		$('#btn-seller-register').click(sellerRegister);	
		function sellerRegister(){

			let userAddress = $('#userAddress').val();

			if(!isAddressValid(userAddress)){
				return;
			}
			
			let option = { 
				from: userAddress, 
				value: '1000000000000000000', 
				gas: 1000000
			};

			contract.registerAsSeller(option, function(err,result) {
				if(err){
					showErrorMsg(err);
					return;
				}
				
				// tx hash
				let msg = `Successfully register like Seller! Transaction hash: ${result}`;
				showSuccessMsg(msg);
			});
		}

		$('#btn-seller-add').click(sellerAddProduct);
		function sellerAddProduct() {
			let userAddress = $('#userAddress').val();

			if(!isAddressValid(userAddress)){
				return;
			}

			let productName = $('#productName').val();
			let productPrice = $('#productPrice').val();
			let ipfsPath = $('#ipfs-address').val();

			if(productName.length < 3 || productName.length > 50 ||
				productName === '' || productName === 'undefined') {
				showErrorMsg('Invalid product name!');
				return;
			}

			if(!isValidPrice) {
				showErrorMsg('Invalid price!');
				return;
			}

			//productPrice = toFinney(parseFloat(productPrice));
			productPrice = web3.toWei(productPrice, 'ether');
			
			let option = { 
				from: userAddress,
				gas: 1000000
			};

			contract.addProduct(productPrice, productName, ' ', ipfsPath, option, function(err,result){
				if(err){
					showErrorMsg(err);
					return;
				}
				
				// tx hash
				let msg = `Successfully add a product! Transaction hash: <a target="_blank" href="https://ropsten.etherscan.io/tx/${result}">${result}</a>`;
				showSuccessMsg(msg);

				$('#productName').val('');
				$('#productPrice').val('');
			}); 
		}

		$('#btn-upload').click(upload);
		function upload(){

			const reader = new FileReader();
			reader.onloadend = function() {

				const ipfs = IpfsApi('localhost', 5001); // Connect to IPFS
				const buf = buffer.Buffer(reader.result); // Convert data into buffer
				ipfs.files.add(buf, (err, result) => { // Upload buffer to IPFS
					if(err) {
						console.error(err);
						return;
					}

					$('#ipfs-address').val(result[0].hash);
					let url = `https://ipfs.io/ipfs/${result[0].hash}`
					//document.getElementById("url").innerHTML= url
					//document.getElementById("url").href= url
					document.getElementById("output").src = url;
				});
			}
			const photo = document.getElementById("productResource");
			reader.readAsArrayBuffer(photo.files[0]); // Read Provided File
		}

		// /get/show all products
		if(shouldGetProducts){

			getProducts();
			function getProducts(){

				let option = { 
				from: creator,
				gas: 1000000
				};

				contract.getNumberOfProducts( option, function(err,result){
				if(err){
					showErrorMsg(err);
					return;
				}
				
				let numberOfProducts = JSON.parse(result);
				

				for(let i = 0; i < numberOfProducts; i++) {
					contract.getProduct(i, option, function(e,r){
						if(e){
							showErrorMsg(r);
							return;
						}

						let name = r[1];
						let price = web3.fromWei(JSON.parse(r[0]), 'ether');

						addProductToView({name, price, link: 'none'});
					});
				}
			}); 
			}
		}

		setTimeout(setBuyEvent,500);

		function setBuyEvent(){
			$('.btn-buy-product').click(buyProduct);
		}

		function buyProduct() {
			let name = $(this).data('productname');
			let price = $(this).data('price');
			
			let userAddress = $('#userAddress').val();

			if(!isAddressValid(userAddress)){
				return;
			}

			let option = { 
				from: userAddress,
				value : `${web3.toWei(price, 'ether')}`,
				gas: 1000000
			};

			//console.log(name);
			//console.log(option);

			contract.buyProduct(name, option, function(err,result){
				if(err){
					showErrorMsg(err);
					return;
				}

				console.log('addr ' + result);
				
				// tx hash
				let msg = `Successfully buy a '${name}'! Transaction hash: ${result}`;
				showSuccessMsg(msg);
			}); 
		}

		$('#btn-check-balance').click(checkBalance);
		function checkBalance(context, callback){
			
			let userAddress = $('#userAddress').val();

			if(!isAddressValid(userAddress)){
				return;
			}
			
			let option = { 
				from: userAddress, 
				gas: 1000000
			};

			contract.getBalance(option, function(err,result) {
				if(err){
					showErrorMsg("Error! Maybe this address is not register as a 'Seller'!");
					return;
				}
				
				let balance = web3.fromWei(JSON.parse(result), 'ether');

				if(callback){
					return callback(balance);
				}

				$('#sellerBalance').closest('div').removeClass('hide-me');
				$('#sellerBalance').val(balance + ' ether');
				$('#sellerBalance').show();
			});
		}

		$('#btn-withdraw').click(withdraw);
		function withdraw() {
			let userAddress = $('#userAddress').val();

			if(!isAddressValid(userAddress)){
				return;
			}

			let withdrawAmount = $('#withdrawAmount').val();

			if(isNaN(withdrawAmount) || !isFinite(withdrawAmount) || 
				withdrawAmount === '' || withdrawAmount === 'undefined'){

				showErrorMsg("Invalid input! Input should be a number!");
				return;
			}

			checkBalance(null, getBalanceAndContinue)
			function getBalanceAndContinue(sellerBalance){

				let difference = sellerBalance - parseFloat(withdrawAmount)
				let canWithdraw = difference >= 0;
				
				if(!canWithdraw){

					showErrorMsg(`Your current balance is: ${sellerBalance} ethers.`);
					showErrorMsg(`Amount you wish to withdraw is :${parseFloat(withdrawAmount)} ethers.`);
					showErrorMsg(`You do not have enough funds!`);
					return;
				}

				let amountAsWei = web3.toWei(withdrawAmount, 'ether');

				let option = { 
					from: userAddress, 
					gas: 1000000
				};

				contract.withdraw(amountAsWei, option, function(err,result) {
					if(err){
						showErrorMsg(err);
						return;
					}
					
					showSuccessMsg(`${withdrawAmount} ethers successfully withdrawn! Remaining balance of ${difference} ethers!`);
					
					$('#withdrawAmount').val('');
				});
			}
		}

		//utis

		// add product to view
		function addProductToView(product){
			let productView = ` <div class="col-xs-4">
    <br>
    <br>

    <fieldset style="margin:5px; padding:10px; border:1px solid gray; border-radius: 5px;">
        <div class="col-xs-12">
            Name:
            <b>${product.name}</b>
        </div>

        <div class="col-xs-12">
            Price:
            <b>${product.price}</b> ether
        </div>

        <div class="col-xs-12">
            Link to IPFS:
            <a class="btn btn-sm btn-default" href="https://ipfs.io/ipfs/${product.link}">Click</a>
        </div>

        <div class="col-xs-12">
            <br>
            <button class="btn btn-primary btn-buy-product" type="button" data-price="${product.price}" data-productname="${product.name}">Purchase</button>
        </div>
    </fieldset>
</div>


</div>`;
			
			$('#product-wrapper').append(productView);
		}

		// address validator
		function isAddressValid(address){

			if(address.indexOf('0x') !== 0){
				showErrorMsg('Invalid address!');
				return false;
			}

			if(address.length !== 42){
				showErrorMsg('Invalid address length!');
				return false;;
			}

			return true;
		}

		function isValidPrice(price) {

			if(isNaN(price)){
				return false;
			}

			if(price === '' || price === 'undefined'){
				return false;
			}

			let number = parseFloat(price);

			if(number < 0){
				return false;
			}

			return number;
		}

		function toFinney(number) {

			let length = number.toString().length;
			let indexOfDecimal = number.toString().indexOf('.');

			let weiLength = 18;
			
			if(indexOfDecimal < 1){
				return number + '0'.repeat(weiLength);
			}

			let exponent = length - indexOfDecimal - 1;

			if(indexOfDecimal < 1){
				multiplier = 1;
			}

			let newNum = number.toString().replace('.', '');

			let wei = '0'.repeat(weiLength - exponent);
			let asWei = newNum + wei;

			return asWei;
		}

		// messages
		$('.msg').click(onMsgClick);
		function onMsgClick(){
			$(this).hide();
		}

		function showSuccessMsg(text) {
			$('.success-msg').html(text);
			$('.success-msg').removeClass('hide-me');
			$('.success-msg').show();
		}

		function showErrorMsg(text) {
			$('.error-msg').text(text);
			$('.error-msg').removeClass('hide-me');
			$('.error-msg').show();
		}
	})
</script>

</html>